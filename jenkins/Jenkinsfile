pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'localhost:5000'
        KUBE_NAMESPACE = 'petals-pages'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo '‚úÖ Code checked out successfully'
            }
        }
        
        stage('Build Services') {
            parallel {
                stage('Build Product Service') {
                    steps {
                        dir('services/product-service') {
                            sh 'docker build -t product-service:${BUILD_NUMBER} .'
                            sh 'docker tag product-service:${BUILD_NUMBER} product-service:latest'
                            echo '‚úÖ Product service built'
                        }
                    }
                }
                stage('Build Order Service') {
                    steps {
                        dir('services/order-service') {
                            sh 'docker build -t order-service:${BUILD_NUMBER} .'
                            sh 'docker tag order-service:${BUILD_NUMBER} order-service:latest'
                            echo '‚úÖ Order service built'
                        }
                    }
                }
                stage('Build User Service') {
                    steps {
                        dir('services/user-service') {
                            sh 'docker build -t user-service:${BUILD_NUMBER} .'
                            sh 'docker tag user-service:${BUILD_NUMBER} user-service:latest'
                            echo '‚úÖ User service built'
                        }
                    }
                }
                stage('Build Frontend') {
                    steps {
                        dir('frontend') {
                            sh 'docker build -t frontend:${BUILD_NUMBER} .'
                            sh 'docker tag frontend:${BUILD_NUMBER} frontend:latest'
                            echo '‚úÖ Frontend built'
                        }
                    }
                }
            }
        }
        
        stage('Test') {
            steps {
                echo 'üß™ Running tests...'
                sh '''
                    echo "Testing product service health endpoint..."
                    docker run --rm product-service:latest python -c "print('Product service OK')"
                    
                    echo "Testing order service..."
                    docker run --rm order-service:latest node -e "console.log('Order service OK')"
                    
                    echo "Testing user service..."
                    docker run --rm user-service:latest python -c "print('User service OK')"
                '''
                echo '‚úÖ All tests passed'
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                echo 'üöÄ Deploying to Kubernetes...'
                sh '''
                    kubectl apply -f kubernetes/namespace.yaml
                    kubectl apply -f kubernetes/postgres-deployment.yaml
                    kubectl apply -f kubernetes/product-service-deployment.yaml
                    kubectl apply -f kubernetes/order-service-deployment.yaml
                    kubectl apply -f kubernetes/user-service-deployment.yaml
                    kubectl apply -f kubernetes/frontend-deployment.yaml
                    
                    kubectl rollout status deployment/product-service -n ${KUBE_NAMESPACE}
                    kubectl rollout status deployment/order-service -n ${KUBE_NAMESPACE}
                    kubectl rollout status deployment/user-service -n ${KUBE_NAMESPACE}
                    kubectl rollout status deployment/frontend -n ${KUBE_NAMESPACE}
                '''
                echo '‚úÖ Deployment successful'
            }
        }
        
        stage('Verify Deployment') {
            steps {
                echo 'üîç Verifying deployment...'
                sh '''
                    kubectl get pods -n ${KUBE_NAMESPACE}
                    kubectl get svc -n ${KUBE_NAMESPACE}
                '''
                echo '‚úÖ Verification complete'
            }
        }
    }
    
    post {
        success {
            echo 'üéâ Pipeline completed successfully!'
        }
        failure {
            echo '‚ùå Pipeline failed!'
        }
    }
}